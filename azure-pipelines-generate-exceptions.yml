# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'vs2017-win2016'

###################################################################
# CI Stage                                                        #
###################################################################
stages:
- stage: CI
  jobs:
  - job: CI    
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: CopyFiles@2
      displayName: 'Copy Automated Tests to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**\bin\$(buildConfiguration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - publish: $(build.artifactstagingdirectory)
      artifact: $(ArtifactName)
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))


###################################################################
# Test Stage                                                      #
###################################################################
- stage: Test
  displayName: Test
  dependsOn: CI
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  variables:
    slot: QA

  jobs:
  - deployment: RunTests
    displayName: Rund UI Tests to generate exceptions
    # creates an environment if it doesn't exist
    environment: 'Daily Test Run'
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: $(ArtifactName)

          - task: VSTest@2
            displayName: 'Test Run #1'
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: '$(Pipeline.Workspace)/$(ArtifactName)/PartsUnlimited-aspnet45/test'
              testFiltercriteria: 'TestCategory=L1UITests|TestCategory=L2UITests'
              uiTests: true
              testRunTitle: '01 Generate Exceptions'
              diagnosticsEnabled: true
            continueOnError: true

          - task: VSTest@2
            displayName: 'Test Run #3'
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: '$(Pipeline.Workspace)/$(ArtifactName)/PartsUnlimited-aspnet45/test'
              testFiltercriteria: 'TestCategory=L1UITests|TestCategory=L2UITests'
              uiTests: true
              testRunTitle: '02 Generate Exceptions'
              diagnosticsEnabled: true
            continueOnError: true

          - task: VSTest@2
            displayName: 'Test Run #3'
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: '$(Pipeline.Workspace)/$(ArtifactName)/PartsUnlimited-aspnet45/test'
              testFiltercriteria: 'TestCategory=L1UITests|TestCategory=L2UITests'
              uiTests: true
              testRunTitle: '03 Generate Exceptions'
              diagnosticsEnabled: true
            continueOnError: true
